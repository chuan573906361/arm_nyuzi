/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xparameters_ps.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "xscugic.h"
#include "xil_exception.h"


#define INT_CFG0_OFFSET 0x00000C00
#define SW1_INT_ID              61
#define INTC_DEVICE_ID          XPAR_PS7_SCUGIC_0_DEVICE_ID
#define INT_TYPE_RISING_EDGE    0x03
#define INT_TYPE_HIGHLEVEL      0x01
#define INT_TYPE_MASK           0x03
#define DDR_BASEARDDR  XPAR_DDR_MEM_BASEADDR + 0x10000000 //只读取DDR中的一部分数据
#define DDR_HIGHADDR   XPAR_DDR_MEM_HIGHADDR
//void print(char *str);

static XScuGic INTCInst;

static void SW_intr_Handler(void *param);
static int InterruptSystemSetup(XScuGic *XScuGicInstancePtr);
static int IntcInitFunction(u16 DeviceId);

static void SW_intr_Handler(void *param)
{
    int sw_id = (int)param;
    printf("SW%d int\n\r", sw_id);
}

void IntcTypeSetup(XScuGic *InstancePtr, int intId, int intType)
{
    int mask;

    intType &= INT_TYPE_MASK;
    mask = XScuGic_DistReadReg(InstancePtr, INT_CFG0_OFFSET + (intId/16)*4);
    mask &= ~(INT_TYPE_MASK << (intId%16)*2);
    mask |= intType << ((intId%16)*2);
    XScuGic_DistWriteReg(InstancePtr, INT_CFG0_OFFSET + (intId/16)*4, mask);
}

int IntcInitFunction(u16 DeviceId)
{
    XScuGic_Config *IntcConfig;
    int status;

    // Interrupt controller initialisation
    IntcConfig = XScuGic_LookupConfig(DeviceId);
    status = XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);
    if(status != XST_SUCCESS) return XST_FAILURE;

    // Call to interrupt setup
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
                                 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
                                 &INTCInst);
    Xil_ExceptionEnable();

    // Connect SW1~SW3 interrupt to handler
    status = XScuGic_Connect(&INTCInst,
                             SW1_INT_ID,
                             (Xil_ExceptionHandler)SW_intr_Handler,
                             (void *)1);
    if(status != XST_SUCCESS) return XST_FAILURE;

//    status = XScuGic_Connect(&INTCInst,
//                             SW2_INT_ID,
//                             (Xil_ExceptionHandler)SW_intr_Handler,
//                             (void *)2);
//    if(status != XST_SUCCESS) return XST_FAILURE;
//
//    status = XScuGic_Connect(&INTCInst,
//                             SW3_INT_ID,
//                             (Xil_ExceptionHandler)SW_intr_Handler,
//                             (void *)3);
//    if(status != XST_SUCCESS) return XST_FAILURE;

    // Set interrupt type of SW1~SW3 to rising edge
    IntcTypeSetup(&INTCInst, SW1_INT_ID, INT_TYPE_RISING_EDGE);
//    IntcTypeSetup(&INTCInst, SW2_INT_ID, INT_TYPE_RISING_EDGE);
//    IntcTypeSetup(&INTCInst, SW3_INT_ID, INT_TYPE_RISING_EDGE);

    // Enable SW1~SW3 interrupts in the controller
    XScuGic_Enable(&INTCInst, SW1_INT_ID);
//    XScuGic_Enable(&INTCInst, SW2_INT_ID);
//    XScuGic_Enable(&INTCInst, SW3_INT_ID);

    return XST_SUCCESS;
}

static volatile unsigned int * const LED = (volatile unsigned int*) 0x40000000;
int main()
{
    init_platform();

    int array_code[]={
    		0x000000ac,
    		0x000400f4,
    		0xbf8300a8,
    		0x18ffff07,
    		0x0e03008c,
    		0x1f208402,
    		0x0100008c,
    		0x00148007,
    		0x0400008c,
    		0x800a00f8,
    		0x80fffff7,
    		0x00000015,
    		0x0400ffff,
    		0x0000ffff,
    		0xbd03ff02,
    		0xddf30088,
    		0x3fb0ffa9,
    		0x00048007,
    		0x01000088,
    		0x5f90ffa9,
    		0x00108007,
    		0x02000088,
    		0x00088007,
    		0x02000088,
    		0x42008007,
    		0x41000088,
    		0x801300f8,
    		0xddf300a8,
    		0xbd038102,
    		0xe003ffc0,
    		0x38000010,
    		0xbd03ff02,
    		0xddf30088,
    		0x00088007,
    		0x3fb0ffa9,
    		0x800700f8,
    		0x80fffff7,
    		0xb0010010,
    		0x21048007,
    		0x0100b0c0,
    		0x200000ac,
    		0x21088005,
    		0x5fa0ffa9,
    		0x228050c0,
    		0x410000a8,
    		0x020000c0,
    		0x01000088,
    		0x0e00008c,
    		0xe003ffc0,
    		0x30020010,
    		0xb0010010,
    		0x40088005,
    		0x7fc0ffa9,
    		0x430051c0,
    		0x22000088,
    		0x21048007,
    		0x0100b0c0,
    		0x200000ac,
    		0x21088005,
    		0x5f60ffa9,
    		0x228050c0,
    		0x410000a8,
    		0x020000c0,
    		0x01000088,
    		0x0e00008c,
    		0xe003ffc0,
    		0x21048007,
    		0x0100b0c0,
    		0x0f00008c,
    		0xe003ffc0,
    		0xb0010010,
    		0x30020010,
    		0xbd03ff02,
    		0x1df30088,
    		0x3de30088,
    		0x5dd30088,
    		0x7dc30088,
    		0xddb30088,
    		0x030000ac,
    		0x003c8000,
    		0x000c8008,
    		0x800900f4,
    		0x000000ac,
    		0x00088005,
    		0x3f10ffa9,
    		0x010050c0,
    		0x300000ac,
    		0x000000a8,
    		0x008310c0,
    		0x980500f2,
    		0x3fc3fea9,
    		0x5a078007,
    		0x6003ecc0,
    		0x1b088005,
    		0x190050c0,
    		0x000000a8,
    		0x000000fc,
    		0x1a80bdc0,
    		0x00fcff01,
    		0x180310c0,
    		0x98fbfff5,
    		0xddb300a8,
    		0x7dc300a8,
    		0x5dd300a8,
    		0x3de300a8,
    		0x1df300a8,
    		0xbd038102,
    		0xe003ffc0,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x00000000,
    		0x10000000,
    		0x00000000,
    		0x017a5200,
    		0x017c1e01,
    		0x0b0c1d00,
    		0x14000000,
    		0x18000000,
    		0x38000010,
    		0x40000000,
    		0x00440e40,
    		0x449e0100,
    		0x14000000,
    		0x30000000,
    		0x7c000010,
    		0x18000000,
    		0x00440e40,
    		0x449e0100,
    		0x10000000,
    		0x48000000,
    		0x98000010,
    		0x2c000000,
    		0x00000000,
    		0x10000000,
    		0x5c000000,
    		0xcc000010,
    		0x3c000000,
    		0x00000000,
    		0x10000000,
    		0x70000000,
    		0x08010010,
    		0x10000000,
    		0x00000000,
    		0x1c000000,
    		0x84000000,
    		0x20010010,
    		0x90000000,
    		0x00440e40,
    		0x54980199,
    		0x029a039b,
    		0x049e0500
        };
    int i=0;
    int rev;
    print("Hello World\n\r");
    int count = 0;
    while(count < 228)
    {
    	Xil_Out32(DDR_BASEARDDR+count*4,array_code[count]);
        count++;
    }
    while(i < 5){
                rev = Xil_In32(DDR_BASEARDDR+i*4);
                xil_printf("the address at  %x data is : %x \n\r" ,DDR_BASEARDDR+i*4, rev);
                ++i;
            }
    IntcInitFunction(INTC_DEVICE_ID);
    float t = time();
    printf("time is %f\n",t);
    sleep(10);
    printf("start!!!!!!!!now\n");
    LED[0] = 0x1;
   // Xil_Out32(0x40000000,0x1);
  //  rev = Xil_In32(0x40000000);
 //   xil_printf("the address at  %x data is : %x \n\r" ,DDR_BASEARDDR+i*4, rev);
   // while(1);
    cleanup_platform();
    return 0;
}
